var searchIndex = {};
searchIndex["merkle_tree"] = {"doc":"merkle-tree implement Merkle Tree in Rust.","items":[[3,"MerkleTree","merkle_tree","",null,null],[11,"new","","Creates new, empty `MerkleTree`. # Examples",0,{"inputs":[],"output":{"name":"self"}}],[11,"from_vec","","Creates `MerkleTree` from `Vec` of elements. # Examples",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"push","","Push element into the end of the tree. # Examples",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"remove","","Removes element from the tree and returns `true` if element was removed successfully and `false` if `index` out of bounds. # Examples",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get","","Retrieves an element in the `MerkleTree` by index. # Examples",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_values","","Retrieves copies of all elements in the `MerkleTree`. # Examples",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","Returns the number of elements in the three # Examples",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"height","","Returns the height of the three # Examples",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the `MerkleTree` is empty. # Examples",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"root_hash","","Returns root hash of `MerkleTree` # Examples",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"validate_element","","Verifies if the `value` really presents in `MerkleTree` # Examples",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"str"}],"output":{"name":"bool"}}],[11,"iter","","Returns a front-to-back iterator. # Examples",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}]],"paths":[[3,"MerkleTree"]]};
initSearch(searchIndex);
